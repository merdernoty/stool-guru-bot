package bot

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/merdernoty/stool-guru-bot/internal/config"
)

type StoolGuruBot struct {
	bot    *bot.Bot
	config *config.Config
	ctx    context.Context
	cancel context.CancelFunc
}

func NewBot(cfg *config.Config) (*StoolGuruBot, error) {
	ctx, cancel := context.WithCancel(context.Background())
	httpClient := &http.Client{
		Timeout: cfg.Timeout,
		Transport: &http.Transport{
			IdleConnTimeout:       30 * time.Second,
			TLSHandshakeTimeout:   10 * time.Second,
			ResponseHeaderTimeout: cfg.Timeout,
		},
	}

	log.Printf("üîÑ Creating bot with custom HTTP client (timeout: %v)", cfg.Timeout)

	opts := []bot.Option{
		bot.WithDefaultHandler(defaultHandler),
		bot.WithCheckInitTimeout(cfg.Timeout),
		bot.WithHTTPClient(30*time.Second, httpClient),
	}

	if cfg.Debug {
		opts = append(opts, bot.WithMiddlewares(debugMiddleware))
		log.Println("üîç Debug mode enabled")
	}

	b, err := bot.New(cfg.TelegramToken, opts...)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	stoolBot := &StoolGuruBot{
		bot:    b,
		config: cfg,
		ctx:    ctx,
		cancel: cancel,
	}

	stoolBot.registerHandlers()

	log.Printf("‚úÖ Bot initialized successfully")
	return stoolBot, nil
}

func (sb *StoolGuruBot) registerHandlers() {
	// –ö–æ–º–∞–Ω–¥—ã
	sb.bot.RegisterHandler(bot.HandlerTypeMessageText, "/start", bot.MatchTypeExact, sb.handleStart)
	sb.bot.RegisterHandler(bot.HandlerTypeMessageText, "/help", bot.MatchTypeExact, sb.handleHelp)
	sb.bot.RegisterHandler(bot.HandlerTypeMessageText, "/test", bot.MatchTypeExact, sb.handleTest)
	sb.bot.RegisterHandler(bot.HandlerTypeMessageText, "/analyze", bot.MatchTypeExact, sb.handleAnalyze)

	// Callback queries
	sb.bot.RegisterHandler(bot.HandlerTypeCallbackQueryData, "test", bot.MatchTypeExact, sb.handleTestCallback)
	sb.bot.RegisterHandler(bot.HandlerTypeCallbackQueryData, "help", bot.MatchTypeExact, sb.handleHelpCallback)
	sb.bot.RegisterHandler(bot.HandlerTypeCallbackQueryData, "analyze", bot.MatchTypeExact, sb.handleAnalyzeCallback)
	sb.bot.RegisterHandler(bot.HandlerTypeCallbackQueryData, "analyze_good", bot.MatchTypeExact, sb.handleAnalyzeGoodCallback)
	sb.bot.RegisterHandler(bot.HandlerTypeCallbackQueryData, "analyze_normal", bot.MatchTypeExact, sb.handleAnalyzeNormalCallback)
	sb.bot.RegisterHandler(bot.HandlerTypeCallbackQueryData, "analyze_bad", bot.MatchTypeExact, sb.handleAnalyzeBadCallback)

	log.Println("üìù Handlers registered successfully")
}

// Message handlers
func (sb *StoolGuruBot) handleStart(ctx context.Context, b *bot.Bot, update *models.Update) {
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üß™ –¢–µ—Å—Ç", CallbackData: "test"},
				{Text: "‚ùì –ü–æ–º–æ—â—å", CallbackData: "help"},
			},
			{
				{Text: "üìä –ê–Ω–∞–ª–∏–∑", CallbackData: "analyze"},
			},
		},
	}

	text := "ü§ñ Stool Guru Bot –∑–∞–ø—É—â–µ–Ω\n\n–ü—Ä–∏–≤–µ—Ç, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –∑–¥–æ—Ä–æ–≤—å—è.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        text,
		ReplyMarkup: keyboard,
	})
	if err != nil {
		log.Printf("Error sending start message: %v", err)
	}
}

func (sb *StoolGuruBot) handleHelp(ctx context.Context, b *bot.Bot, update *models.Update) {
	text := "üÜò –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n\n/start ‚Ä¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help ‚Ä¢ –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n/test ‚Ä¢ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π\n/analyze ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è\n\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ üéâ"

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   text,
	})
	if err != nil {
		log.Printf("Error sending help message: %v", err)
	}
}

func (sb *StoolGuruBot) handleTest(ctx context.Context, b *bot.Bot, update *models.Update) {
	log.Println("üß™ Test command received")

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "üß™ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª! HTTP –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
	})
	if err != nil {
		log.Printf("Error sending test message: %v", err)
	}
}

func (sb *StoolGuruBot) handleAnalyze(ctx context.Context, b *bot.Bot, update *models.Update) {
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üü¢ –•–æ—Ä–æ—à–µ–µ", CallbackData: "analyze_good"},
				{Text: "üü° –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", CallbackData: "analyze_normal"},
			},
			{
				{Text: "üî¥ –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã", CallbackData: "analyze_bad"},
			},
		},
	}

	text := "üìä –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è\n\n–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è?\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        text,
		ReplyMarkup: keyboard,
	})
	if err != nil {
		log.Printf("Error sending analyze message: %v", err)
	}
}

func (sb *StoolGuruBot) handleTestCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª –æ—Ç–ª–∏—á–Ω–æ!",
		ShowAlert:       true,
	})
	if err != nil {
		log.Printf("Error answering callback: %v", err)
	}
}

func (sb *StoolGuruBot) handleHelpCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "üìã –ö–æ–º–∞–Ω–¥—ã: /start /help /test /analyze",
		ShowAlert:       false,
	})
	if err != nil {
		log.Printf("Error answering callback: %v", err)
	}
}

func (sb *StoolGuruBot) handleAnalyzeCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∏–∂–µ",
		ShowAlert:       false,
	})
	if err != nil {
		log.Printf("Error answering callback: %v", err)
	}
}

func (sb *StoolGuruBot) handleAnalyzeGoodCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "üü¢ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ü–µ–π—Ç–µ –≤–æ–¥—É, –µ—à—å—Ç–µ –∫–ª–µ—Ç—á–∞—Ç–∫—É, –¥–≤–∏–≥–∞–π—Ç–µ—Å—å!",
		ShowAlert:       true,
	})
	if err != nil {
		log.Printf("Error answering callback: %v", err)
	}
}

func (sb *StoolGuruBot) handleAnalyzeNormalCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "üü° –ù–æ—Ä–º–∞–ª—å–Ω–æ! –°–æ–≤–µ—Ç—ã: –±–æ–ª—å—à–µ –ø—Ä–æ–±–∏–æ—Ç–∏–∫–æ–≤, –æ–≤–æ—â–µ–π, –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ—Å–ª–µ –µ–¥—ã",
		ShowAlert:       true,
	})
	if err != nil {
		log.Printf("Error answering callback: %v", err)
	}
}

func (sb *StoolGuruBot) handleAnalyzeBadCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "üî¥ –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É! –ü–µ–π—Ç–µ –≤–æ–¥—É, –∏–∑–±–µ–≥–∞–π—Ç–µ –æ—Å—Ç—Ä–æ–≥–æ",
		ShowAlert:       true,
	})
	if err != nil {
		log.Printf("Error answering callback: %v", err)
	}
}

// Bot control methods
func (sb *StoolGuruBot) StartPolling() error {
	log.Println("üîÑ Starting bot in polling mode...")

	go func() {
		c := make(chan os.Signal, 1)
		signal.Notify(c, os.Interrupt, syscall.SIGTERM)
		<-c
		log.Println("üõë Received shutdown signal...")
		sb.cancel()
	}()

	log.Println("‚úÖ Bot started! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –≤ Telegram")
	sb.bot.Start(sb.ctx)
	log.Println("‚úÖ Bot stopped gracefully")
	return nil
}

func (sb *StoolGuruBot) SetWebhook() error {
	if sb.config.WebhookURL == "" {
		return fmt.Errorf("webhook URL is required")
	}

	webhookURL := sb.config.WebhookURL + "/bot"

	ctxWithTimeout, cancel := context.WithTimeout(sb.ctx, sb.config.Timeout)
	defer cancel()

	_, err := sb.bot.SetWebhook(ctxWithTimeout, &bot.SetWebhookParams{
		URL: webhookURL,
	})
	if err != nil {
		return fmt.Errorf("failed to set webhook: %w", err)
	}

	log.Printf("üì° Webhook set to: %s", webhookURL)
	return nil
}

func (sb *StoolGuruBot) ProcessWebhookUpdate(update *models.Update) error {
	sb.bot.ProcessUpdate(sb.ctx, update)
	return nil
}

// Middleware
func debugMiddleware(next bot.HandlerFunc) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		if update.Message != nil {
			log.Printf("üîç Message from @%s: %s",
				update.Message.From.Username,
				update.Message.Text)
		}
		if update.CallbackQuery != nil {
			log.Printf("üîç Callback from @%s: %s",
				update.CallbackQuery.From.Username,
				update.CallbackQuery.Data)
		}
		next(ctx, b, update)
	}
}

// Default handler –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func defaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message != nil && update.Message.Text != "" {
		log.Printf("üì® Unhandled message: %s", update.Message.Text)

		response := "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ /start ‚Ä¢ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n‚Ä¢ /help ‚Ä¢ —Å–ø—Ä–∞–≤–∫–∞\n‚Ä¢ /test ‚Ä¢ —Ç–µ—Å—Ç\n‚Ä¢ /analyze ‚Ä¢ –∞–Ω–∞–ª–∏–∑"

		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   response,
		})
		if err != nil {
			log.Printf("Error in default handler: %v", err)
		}
	}
}
