package bot

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/merdernoty/stool-guru-bot/internal/bot/handlers/callbacks"
	"github.com/merdernoty/stool-guru-bot/internal/bot/handlers/commands"
	"github.com/merdernoty/stool-guru-bot/internal/bot/router"
	"github.com/merdernoty/stool-guru-bot/internal/bot/services/gemini"
	"github.com/merdernoty/stool-guru-bot/internal/config"
)

type StoolGuruBot struct {
	bot           *bot.Bot
	config        *config.Config
	router        *router.Router
	ctx           context.Context
	cancel        context.CancelFunc
}

func NewBot(cfg *config.Config, geminiService *gemini.GeminiService) (*StoolGuruBot, error) {
	ctx, cancel := context.WithCancel(context.Background())
	httpClient := &http.Client{
		Timeout: cfg.Timeout,
		Transport: &http.Transport{
			IdleConnTimeout:       30 * time.Second,
			TLSHandshakeTimeout:   10 * time.Second,
			ResponseHeaderTimeout: cfg.Timeout,
		},
	}

	log.Printf("üîÑ Creating bot with custom HTTP client (timeout: %v)", cfg.Timeout)

	opts := []bot.Option{
		bot.WithDefaultHandler(defaultHandler),
		bot.WithCheckInitTimeout(cfg.Timeout),
		bot.WithHTTPClient(30*time.Second, httpClient),
	}

	if cfg.Debug {
		opts = append(opts, bot.WithMiddlewares(debugMiddleware))
		log.Println("üîç Debug mode enabled")
	}

	b, err := bot.New(cfg.TelegramToken, opts...)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	startHandler := commands.NewStartHandler()
	helpHandler := commands.NewHelpHandler()
	callbackHandlers := callbacks.NewCallbackHandlers()


	botRouter := router.NewRouter(
		startHandler,
		helpHandler,

		callbackHandlers,
	)

	stoolBot := &StoolGuruBot{
		bot:    b,
		config: cfg,
		router: botRouter,
		ctx:    ctx,
		cancel: cancel,
	}

	stoolBot.router.RegisterHandlers(stoolBot.bot)

	log.Printf("‚úÖ Bot initialized successfully")
	return stoolBot, nil
}

func (sb *StoolGuruBot) StartPolling() error {
	log.Println("üîÑ Starting bot in polling mode...")

	go func() {
		c := make(chan os.Signal, 1)
		signal.Notify(c, os.Interrupt, syscall.SIGTERM)
		<-c
		log.Println("üõë Received shutdown signal...")
		sb.cancel()
	}()

	log.Println("‚úÖ Bot started! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –≤ Telegram")
	sb.bot.Start(sb.ctx)
	log.Println("‚úÖ Bot stopped gracefully")
	return nil
}

func (sb *StoolGuruBot) SetWebhook() error {
	if sb.config.WebhookURL == "" {
		return fmt.Errorf("webhook URL is required")
	}

	webhookURL := sb.config.WebhookURL + "/bot"

	ctxWithTimeout, cancel := context.WithTimeout(sb.ctx, sb.config.Timeout)
	defer cancel()

	_, err := sb.bot.SetWebhook(ctxWithTimeout, &bot.SetWebhookParams{
		URL: webhookURL,
	})
	if err != nil {
		return fmt.Errorf("failed to set webhook: %w", err)
	}

	log.Printf("üì° Webhook set to: %s", webhookURL)
	return nil
}

func (sb *StoolGuruBot) ProcessWebhookUpdate(update *models.Update) error {
	sb.bot.ProcessUpdate(sb.ctx, update)
	return nil
}

func (sb *StoolGuruBot) SetGlobalBot() {
	// TODO: –£–±—Ä–∞—Ç—å –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
	globalStoolBot = sb
}


func debugMiddleware(next bot.HandlerFunc) bot.HandlerFunc {
	return func(ctx context.Context, b *bot.Bot, update *models.Update) {
		if update.Message != nil {
			log.Printf("üîç Message from @%s: %s",
				update.Message.From.Username,
				update.Message.Text)
		}
		if update.CallbackQuery != nil {
			log.Printf("üîç Callback from @%s: %s",
				update.CallbackQuery.From.Username,
				update.CallbackQuery.Data)
		}
		next(ctx, b, update)
	}
}

func defaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message != nil && len(update.Message.Photo) > 0 {
		log.Printf("üì∏ Photo received from @%s", update.Message.From.Username)
		
		// TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
		if globalStoolBot != nil {
			globalStoolBot.handlePhoto(ctx, b, update)
		}
		return
	}

	if update.Message != nil && update.Message.Text != "" {
		log.Printf("üì® Unhandled message: %s", update.Message.Text)

		response := `ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /test - —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π

üì∏ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!`

		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      response,
			ParseMode: models.ParseModeMarkdown,
		})
		if err != nil {
			log.Printf("Error in default handler: %v", err)
		}
	}
}

// TODO: –í—Ä–µ–º–µ–Ω–Ω–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–æ—Ç–æ —Ö—ç–Ω–¥–ª–µ—Ä–∞
var globalStoolBot *StoolGuruBot

func (sb *StoolGuruBot) handlePhoto(ctx context.Context, b *bot.Bot, update *models.Update) {
	// TODO: –í—ã–Ω–µ—Å—Ç–∏ –≤ handlers/media/photo.go
	log.Println("üì∏ Photo received for analysis - using legacy handler")
	
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.",
	})
	if err != nil {
		log.Printf("Error sending photo response: %v", err)
	}
}