package callbacks

import (
	"context"
	"log"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

type CallbackHandlers struct{}

func NewCallbackHandlers() *CallbackHandlers {
	return &CallbackHandlers{}
}

func (h *CallbackHandlers) HandleTestCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	log.Printf("üß™ Test callback received from @%s", update.CallbackQuery.From.Username)

	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!",
		ShowAlert:       true,
	})
	if err != nil {
		log.Printf("Error answering test callback: %v", err)
	}
}

func (h *CallbackHandlers) HandleHelpCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	log.Printf("‚ùì Help callback received from @%s", update.CallbackQuery.From.Username)

	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "üìã –ö–æ–º–∞–Ω–¥—ã: /start /help /test /analyze",
		ShowAlert:       false,
	})
	if err != nil {
		log.Printf("Error answering help callback: %v", err)
	}
}

func (h *CallbackHandlers) HandleAnalyzeCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	log.Printf("üìä Analyze callback received from @%s", update.CallbackQuery.From.Username)

	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∏–∂–µ",
		ShowAlert:       false,
	})
	if err != nil {
		log.Printf("Error answering analyze callback: %v", err)
	}
}

func (h *CallbackHandlers) HandleAnalyzeGoodCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	log.Printf("üü¢ Analyze good callback from @%s", update.CallbackQuery.From.Username)

	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "üü¢ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ü–µ–π—Ç–µ –≤–æ–¥—É, –µ—à—å—Ç–µ –∫–ª–µ—Ç—á–∞—Ç–∫—É, –¥–≤–∏–≥–∞–π—Ç–µ—Å—å!",
		ShowAlert:       true,
	})
	if err != nil {
		log.Printf("Error answering good callback: %v", err)
	}
}

func (h *CallbackHandlers) HandleAnalyzeNormalCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	log.Printf("üü° Analyze normal callback from @%s", update.CallbackQuery.From.Username)

	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "üü° –ù–æ—Ä–º–∞–ª—å–Ω–æ! –°–æ–≤–µ—Ç—ã: –±–æ–ª—å—à–µ –ø—Ä–æ–±–∏–æ—Ç–∏–∫–æ–≤, –æ–≤–æ—â–µ–π, –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ—Å–ª–µ –µ–¥—ã",
		ShowAlert:       true,
	})
	if err != nil {
		log.Printf("Error answering normal callback: %v", err)
	}
}

func (h *CallbackHandlers) HandleAnalyzeBadCallback(ctx context.Context, b *bot.Bot, update *models.Update) {
	log.Printf("üî¥ Analyze bad callback from @%s", update.CallbackQuery.From.Username)

	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "üî¥ –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É! –ü–µ–π—Ç–µ –≤–æ–¥—É, –∏–∑–±–µ–≥–∞–π—Ç–µ –æ—Å—Ç—Ä–æ–≥–æ",
		ShowAlert:       true,
	})
	if err != nil {
		log.Printf("Error answering bad callback: %v", err)
	}
}

func (h *CallbackHandlers) GetCallbackPatterns() map[string]func(context.Context, *bot.Bot, *models.Update) {
	return map[string]func(context.Context, *bot.Bot, *models.Update){
		"test":           h.HandleTestCallback,
		"help":           h.HandleHelpCallback,
		"analyze":        h.HandleAnalyzeCallback,
		"analyze_good":   h.HandleAnalyzeGoodCallback,
		"analyze_normal": h.HandleAnalyzeNormalCallback,
		"analyze_bad":    h.HandleAnalyzeBadCallback,
	}
}