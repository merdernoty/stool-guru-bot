package commands

import (
	"context"
	"fmt"
	"log"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/merdernoty/stool-guru-bot/internal/bot/services/gemini"
)

type TestHandler struct {
	geminiService *gemini.GeminiService
}

func NewTestHandler(geminiService *gemini.GeminiService) *TestHandler {
	return &TestHandler{
		geminiService: geminiService,
	}
}

func (h *TestHandler) Handle(ctx context.Context, b *bot.Bot, update *models.Update) {
	log.Printf("üß™ Test command received from @%s", update.Message.From.Username)

	loadingMsg, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI —Å–µ—Ä–≤–∏—Å–∞–º...",
	})
	if err != nil {
		log.Printf("Error sending loading message: %v", err)
		return
	}

	testResult, err := h.geminiService.SendTextMessage(ctx, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini.")
	
	b.DeleteMessage(ctx, &bot.DeleteMessageParams{
		ChatID:    update.Message.Chat.ID,
		MessageID: loadingMsg.ID,
	})

	var responseText string
	if err != nil {
		log.Printf("Gemini test failed: %v", err)
		responseText = `‚ùå **–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª!**

üî¥ –ü—Ä–æ–±–ª–µ–º–∞ —Å Gemini API:
` + "`" + err.Error() + "`" + `

üîß **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é

üí° **–†–µ—à–µ–Ω–∏–µ:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ`
	} else {
		responseText = fmt.Sprintf(`‚úÖ **–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!**

ü§ñ **Gemini AI –æ—Ç–≤–µ—Ç–∏–ª:**
%s

üîß **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:**
‚Ä¢ ‚úÖ Telegram Bot API - —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ ‚úÖ Gemini AI API - —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ ‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç - —Ä–∞–±–æ—Ç–∞–µ—Ç

üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!`, testResult.Text)
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      responseText,
		ParseMode: models.ParseModeMarkdown,
	})
	if err != nil {
		log.Printf("Error sending test result: %v", err)
	}
}

func (h *TestHandler) GetPattern() string {
	return "/test"
}
	
func (h *TestHandler) GetMatchType() bot.MatchType {
	return bot.MatchTypeExact
}