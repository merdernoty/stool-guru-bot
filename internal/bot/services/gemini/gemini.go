package gemini

import (
	"context"
	"fmt"
	"log"
	"strings"

	"google.golang.org/genai"
)

// GeminiService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini AI
type GeminiService struct {
	client *genai.Client
	model  string
}

// AnalysisResult - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
type AnalysisResult struct {
	Text            string `json:"text"`
	Diagnosis       string `json:"diagnosis"`
	Recommendations string `json:"recommendations"`
}

// NewGeminiService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ Gemini
func NewGeminiService(apiKey string) (*GeminiService, error) {
	if apiKey == "" {
		return nil, fmt.Errorf("API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	ctx := context.Background()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
	client, err := genai.NewClient(ctx, &genai.ClientConfig{
		APIKey:  apiKey,
		Backend: genai.BackendGeminiAPI,
	})
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Gemini: %w", err)
	}

	log.Println("‚úÖ Gemini —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	return &GeminiService{
		client: client,
		model:  "gemini-2.0-flash", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
	}, nil
}

// AnalyzeImage –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini AI
func (g *GeminiService) AnalyzeImage(ctx context.Context, imageBytes []byte, mimeType string) (*AnalysisResult, error) {
	if len(imageBytes) == 0 {
		return nil, fmt.Errorf("–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
	}

	if mimeType == "" {
		mimeType = "image/jpeg" // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
	parts := []*genai.Part{
		genai.NewPartFromText(`–¢—ã –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-–≥–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—É–ª–∞/–∫–∞–ª–∞ –∏ –¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –æ—Ü–µ–Ω–∫—É.

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç—É–ª/–∫–∞–ª. –ï—Å–ª–∏ —ç—Ç–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º.

–ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—É–ª, –¥–∞–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
1. –§–û–†–ú–ê –ò –ö–û–ù–°–ò–°–¢–ï–ù–¶–ò–Ø (–ø–æ –ë—Ä–∏—Å—Ç–æ–ª—å—Å–∫–æ–π —à–∫–∞–ª–µ —Å—Ç—É–ª–∞ 1-7)
2. –¶–í–ï–¢ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
3. –†–ê–ó–ú–ï–† –∏ –æ–±—â–∏–π –≤–∏–¥
4. –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´

–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Ç–∞–∫:
üî¨ –ê–ù–ê–õ–ò–ó:
[–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]

‚öïÔ∏è –û–¶–ï–ù–ö–ê:
[–û—Ü–µ–Ω–∫–∞ –ø–æ –ë—Ä–∏—Å—Ç–æ–ª—å—Å–∫–æ–π —à–∫–∞–ª–µ –∏ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ]

ü•ó –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é]

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:
[–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å]

–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ. –ù–∞–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞.`),
		genai.NewPartFromBytes(imageBytes, mimeType),
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å
	contents := []*genai.Content{
		genai.NewContentFromParts(parts, genai.RoleUser),
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –Ω–æ–≤—ã–º API
	result, err := g.client.Models.GenerateContent(ctx, g.model, contents, &genai.GenerateContentConfig{
		Temperature:     genai.Ptr(float32(0.7)),
		MaxOutputTokens: 1500,
		TopP:            genai.Ptr(float32(0.9)),
	})

	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %w", err)
	}

	if result == nil || result.Text() == "" {
		return nil, fmt.Errorf("–ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
	}

	log.Printf("üî¨ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", len(result.Text()))

	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	analysisResult := &AnalysisResult{
		Text: result.Text(),
	}

	// –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	analysisResult.Diagnosis, analysisResult.Recommendations = g.parseResponse(result.Text())

	return analysisResult, nil
}

// AnalyzeImageWithCustomPrompt –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
func (g *GeminiService) AnalyzeImageWithCustomPrompt(ctx context.Context, imageBytes []byte, prompt string, mimeType string) (*AnalysisResult, error) {
	if len(imageBytes) == 0 {
		return nil, fmt.Errorf("–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
	}

	if prompt == "" {
		return nil, fmt.Errorf("–ø—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	if mimeType == "" {
		mimeType = "image/jpeg"
	}

	parts := []*genai.Part{
		genai.NewPartFromText(prompt),
		genai.NewPartFromBytes(imageBytes, mimeType),
	}

	contents := []*genai.Content{
		genai.NewContentFromParts(parts, genai.RoleUser),
	}

	result, err := g.client.Models.GenerateContent(ctx, g.model, contents, &genai.GenerateContentConfig{
		Temperature:     genai.Ptr(float32(0.7)),
		MaxOutputTokens: 1500,
	})

	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %w", err)
	}

	if result == nil || result.Text() == "" {
		return nil, fmt.Errorf("–ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
	}

	return &AnalysisResult{
		Text: result.Text(),
	}, nil
}

// parseResponse –ø–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
func (g *GeminiService) parseResponse(response string) (diagnosis, recommendations string) {
	lines := strings.Split(response, "\n")
	
	var diagnosisLines []string
	var recommendationLines []string
	var currentSection string
	
	for _, line := range lines {
		line = strings.TrimSpace(line)
		
		if strings.Contains(line, "–ê–ù–ê–õ–ò–ó:") || strings.Contains(line, "–û–¶–ï–ù–ö–ê:") {
			currentSection = "diagnosis"
			continue
		} else if strings.Contains(line, "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:") {
			currentSection = "recommendations"
			continue
		} else if strings.Contains(line, "–í–ù–ò–ú–ê–ù–ò–ï:") {
			currentSection = "attention"
			continue
		}
		
		if currentSection == "diagnosis" && line != "" {
			diagnosisLines = append(diagnosisLines, line)
		} else if currentSection == "recommendations" && line != "" {
			recommendationLines = append(recommendationLines, line)
		}
	}
	
	diagnosis = strings.Join(diagnosisLines, " ")
	recommendations = strings.Join(recommendationLines, " ")
	
	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
	if len(diagnosis) > 200 {
		diagnosis = diagnosis[:200] + "..."
	}
	if len(recommendations) > 200 {
		recommendations = recommendations[:200] + "..."
	}
	
	return diagnosis, recommendations
}

// SendTextMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Gemini
func (g *GeminiService) SendTextMessage(ctx context.Context, message string) (*AnalysisResult, error) {
	if message == "" {
		return nil, fmt.Errorf("—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–¥–æ–±–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é genai.Text –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	contents := genai.Text(message)

	result, err := g.client.Models.GenerateContent(ctx, g.model, contents, &genai.GenerateContentConfig{
		Temperature:     genai.Ptr(float32(0.7)),
		MaxOutputTokens: 500,
	})

	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}

	if result == nil || result.Text() == "" {
		return nil, fmt.Errorf("–ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
	}

	return &AnalysisResult{
		Text: result.Text(),
	}, nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º Gemini
func (g *GeminiService) Close() error {
	// –í –Ω–æ–≤–æ–º API –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ Close –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
	// –ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Å—É—Ä—Å–∞–º–∏
	return nil
}

// GetModelInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
func (g *GeminiService) GetModelInfo() string {
	return g.model
}

// HealthCheck –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
func (g *GeminiService) HealthCheck(ctx context.Context) error {
	if g.client == nil {
		return fmt.Errorf("–∫–ª–∏–µ–Ω—Ç Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}
	
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
	_, err := g.SendTextMessage(ctx, "test")
	if err != nil {
		return fmt.Errorf("—Å–µ—Ä–≤–∏—Å Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %w", err)
	}
	
	return nil
}