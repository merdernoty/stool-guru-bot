package gemini

import (
	"context"
	"fmt"
	"log"

	"google.golang.org/genai"
)

type GeminiService struct {
	client *genai.Client
	model  *genai.Model
}

type AnalysisResult struct {
	Text        string `json:"text"`
	Diagnosis   string `json:"diagnosis"`
	Recommendations string `json:"recommendations"`
}

func NewGeminiService(apiKey string) (*GeminiService, error) {
	if apiKey == "" {
		return nil, fmt.Errorf("API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	ctx := context.Background()

	client, err := genai.NewClient(ctx, &genai.ClientConfig{
		APIKey:  apiKey,
		Backend: genai.BackendGeminiAPI,
	})
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Gemini: %w", err)
	}

	model := client.GetModel("gemini-2.0-flash-exp")
	if model == nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å Gemini")
	}

	log.Println("‚úÖ Gemini —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	return &GeminiService{
		client: client,
		model:  model,
	}, nil
}

func (g *GeminiService) AnalyzeImage(ctx context.Context, imageBytes []byte, mimeType string) (*AnalysisResult, error) {
	if len(imageBytes) == 0 {
		return nil, fmt.Errorf("–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
	}

	if mimeType == "" {
		mimeType = "image/jpeg"
	}

	parts := []*genai.Part{
		{
			Text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—É–ª–∞/–∫–∞–ª–∞ –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-–≥–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥. 
			
			–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
			1. –§–æ—Ä–º–∞ –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏—è (—Å–æ–≥–ª–∞—Å–Ω–æ –ë—Ä–∏—Å—Ç–æ–ª—å—Å–∫–æ–π —à–∫–∞–ª–µ —Å—Ç—É–ª–∞)
			2. –¶–≤–µ—Ç –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
			3. –†–∞–∑–º–µ—Ä –∏ –æ–±—â–∏–π –≤–∏–¥
			4. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã
			5. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
			6. –ö–æ–≥–¥–∞ —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É
			
			–û—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
			–î–ò–ê–ì–ù–û–ó: [–∫—Ä–∞—Ç–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è]
			–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏]
			–í–ù–ò–ú–ê–ù–ò–ï: [–∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å]`,
		},
		{
			InlineData: &genai.Blob{
				Data:     imageBytes,
				MIMEType: mimeType,
			},
		},
	}

	result, err := g.client.Models.GenerateContent(ctx, g.model.Name,
		genai.NewUserContent(parts...),
		&genai.GenerateContentConfig{
			Temperature:     0.7,
			MaxOutputTokens: 1000,
		},
	)

	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %w", err)
	}

	if result == nil || result.Text() == "" {
		return nil, fmt.Errorf("–ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
	}

	log.Printf("üî¨ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", len(result.Text()))

	analysisResult := &AnalysisResult{
		Text: result.Text(),
	}

	analysisResult.Diagnosis, analysisResult.Recommendations = g.parseResponse(result.Text())

	return analysisResult, nil
}

func (g *GeminiService) AnalyzeImageWithCustomPrompt(ctx context.Context, imageBytes []byte, prompt string, mimeType string) (*AnalysisResult, error) {
	if len(imageBytes) == 0 {
		return nil, fmt.Errorf("–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
	}

	if prompt == "" {
		return nil, fmt.Errorf("–ø—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	if mimeType == "" {
		mimeType = "image/jpeg"
	}

	parts := []*genai.Part{
		{Text: prompt},
		{
			InlineData: &genai.Blob{
				Data:     imageBytes,
				MIMEType: mimeType,
			},
		},
	}

	result, err := g.client.Models.GenerateContent(ctx, g.model.Name,
		genai.NewUserContent(parts...),
		&genai.GenerateContentConfig{
			Temperature:     0.7,
			MaxOutputTokens: 1000,
		},
	)

	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %w", err)
	}

	if result == nil || result.Text() == "" {
		return nil, fmt.Errorf("–ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
	}

	return &AnalysisResult{
		Text: result.Text(),
	}, nil
}

func (g *GeminiService) parseResponse(response string) (diagnosis, recommendations string) {
	lines := []rune(response)
	text := string(lines)
		
	if len(text) > 100 {
		diagnosis = text[:100] + "..."
		if len(text) > 200 {
			recommendations = text[100:200] + "..."
		}
	} else {
		diagnosis = text
	}
	
	return diagnosis, recommendations
}

func (g *GeminiService) SendTextMessage(ctx context.Context, message string) (*AnalysisResult, error) {
	if message == "" {
		return nil, fmt.Errorf("—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	parts := []*genai.Part{
		{Text: message},
	}

	result, err := g.client.Models.GenerateContent(ctx, g.model.Name,
		genai.NewUserContent(parts...),
		&genai.GenerateContentConfig{
			Temperature:     0.7,
			MaxOutputTokens: 500,
		},
	)

	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}

	if result == nil || result.Text() == "" {
		return nil, fmt.Errorf("–ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
	}

	return &AnalysisResult{
		Text: result.Text(),
	}, nil
}

func (g *GeminiService) Close() error {
	if g.client != nil {
		return g.client.Close()
	}
	return nil
}
func (g *GeminiService) GetModelInfo() string {
	if g.model != nil {
		return g.model.Name
	}
	return "–º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
}